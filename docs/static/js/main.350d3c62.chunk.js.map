{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","useState","newTask","setNewTask","tasks","setTask","taskInput","useRef","addTask","name","newTasks","done","current","focus","className","onSubmit","e","preventDefault","type","onChange","target","value","ref","autoFocus","map","t","i","key","style","textDecoration","onClick","toggleDoneTaskt","splice","removeTastk","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPA8EeA,MArEf,WAA6B,IAAD,EAEIC,mBAAiB,IAFrB,mBAEnBC,EAFmB,KAEVC,EAFU,OAGDF,mBAAkB,IAHjB,mBAGnBG,EAHmB,KAGZC,EAHY,KAIpBC,EAAYC,iBAAyB,MAQrCC,EAAU,SAACC,GAAkB,IAAD,EAC1BC,EAAQ,sBAAON,GAAP,CAAc,CAAEK,OAAME,MAAM,KAC1CN,EAAQK,GACR,UAAAJ,EAAUM,eAAV,SAAmBC,SAerB,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,0BAAMC,SA9BG,SAACC,GACpBA,EAAEC,iBACFT,EAAQN,GACRC,EAAW,MA4BC,2BACEe,KAAK,OACLC,SAAU,SAAAH,GAAC,OAAIb,EAAWa,EAAEI,OAAOC,QACnCP,UAAU,eACVO,MAAOnB,EACPoB,IAAKhB,EACLiB,WAAS,IACX,4BAAQT,UAAU,iCAAlB,WAKJV,EAAMoB,KAAI,SAACC,EAAUC,GAAX,OACR,yBAAKZ,UAAU,sBAAsBa,IAAKD,GACxC,wBAAIE,MAAO,CAAEC,eAAgBJ,EAAEd,KAAO,eAAiB,KAAOc,EAAEhB,MAChE,6BACE,4BAAQK,UAAU,oBAAoBgB,QAAS,kBAnCvC,SAACJ,GACvB,IAAMhB,EAAiB,YAAON,GAC9BM,EAASgB,GAAGf,MAAQD,EAASgB,GAAGf,KAChCN,EAAQK,GAgC2DqB,CAAgBL,KAClED,EAAEd,KAAO,SAAM,UAElB,4BAAQG,UAAU,iBAAiBgB,QAAS,kBAhCxC,SAACJ,GACnB,IAAMhB,EAAiB,YAAON,GAC9BM,EAASsB,OAAON,EAAG,GACnBrB,EAAQK,GA6BwDuB,CAAYP,KAA9D,+BCrDEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.350d3c62.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\n\ntype FormElement = React.FormEvent<HTMLFormElement>\ninterface iTask {\n  name: string,\n  done: boolean\n}\n\nfunction App(): JSX.Element {\n\n  const [newTask, setNewTask] = useState<string>('')\n  const [tasks, setTask] = useState<iTask[]>([])\n  const taskInput = useRef<HTMLInputElement>(null)\n\n  const handleSubmit = (e: FormElement) => {\n    e.preventDefault()\n    addTask(newTask)\n    setNewTask('')\n  }\n\n  const addTask = (name: string) => {\n    const newTasks = [...tasks, { name, done: false }]\n    setTask(newTasks)\n    taskInput.current?.focus()\n  }\n\n  const toggleDoneTaskt = (i: number) => {\n    const newTasks: iTask[] = [...tasks]\n    newTasks[i].done = !newTasks[i].done\n    setTask(newTasks)\n  }\n\n  const removeTastk = (i: number) => {\n    const newTasks: iTask[] = [...tasks]\n    newTasks.splice(i, 1)\n    setTask(newTasks)\n  }\n\n  return (\n    <div className=\"container p-4\">\n      <div className=\"row\">\n        <div className=\"col-md-6 offset-md-3\">\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <input\n                  type=\"text\"\n                  onChange={e => setNewTask(e.target.value)}\n                  className=\"form-control\"\n                  value={newTask}\n                  ref={taskInput}\n                  autoFocus />\n                <button className=\"btn btn-success btn-block mt2\">Save</button>\n              </form>\n            </div>\n          </div>\n          {\n            tasks.map((t: iTask, i: number) => (\n              <div className=\"card card-body mt-2\" key={i}>\n                <h2 style={{ textDecoration: t.done ? 'line-through' : '' }}>{t.name}</h2>\n                <div>\n                  <button className=\"btn btn-secondary\" onClick={() => toggleDoneTaskt(i)}>\n                    {t.done ? '‚úì' : '‚úó'}\n                  </button>\n                  <button className=\"btn btn-danger\" onClick={() => removeTastk(i)}>\n                  üóëÔ∏è\n                  </button>\n                </div>\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/darkly/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}